import com.android.build.api.dsl.ProductFlavor

plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'kotlin-parcelize'
    id 'com.rainyseason.wmmp'
    id 'com.onesignal.androidsdk.onesignal-gradle-plugin'
}

if (System.getenv('CI') != 'true') {
    println "Apply google services plugin"
    apply plugin: 'com.google.gms.google-services'
} else {
    println "Disable google services plugin"
}
apply plugin: 'com.google.firebase.crashlytics'

def getBooleanProp(name) {
    if (project.hasProperty(name)) {
        try {
            return Boolean.parseBoolean(project.property(name))
        } catch (ignored) {
            return true
        }
    }
    return false
}

def localProperties = new Properties()
localProperties.load(new FileInputStream(rootProject.file("local.properties")))

// read from local.properties first
ext.getStringProp = { String name ->
    def value = localProperties.get(name)
    if (value == null) {
        if (project.hasProperty(name)) {
            value = project.property(name)
        }
    }
    println "getStringProp $name return $value"
    return String.valueOf(value)
}

def isPlayStore = getBooleanProp("playstore")

if (isPlayStore) {
    println "Apply firebase performance plugin"
    apply plugin: 'com.google.firebase.firebase-perf'
}

static def generateVersionCode() {
    def result = "git rev-list HEAD --count".execute().text.trim() //unix
    if(result.empty) result = "PowerShell -Command git rev-list HEAD --count".execute().text.trim() //windows
    if(result.empty) throw new RuntimeException("Could not generate versioncode on this platform? Cmd output: ${result.text}")
    return result.toInteger()
}

android {
    compileSdk 31

    testOptions {
        unitTests.all {
            // All the usual Gradle options.
            testLogging {
                events "passed", "skipped", "failed", "standardOut", "standardError"
                outputs.upToDateWhen { false }
                showStandardStreams = true
            }
        }
        unitTests {
            includeAndroidResources = true
        }
    }

    defaultConfig {
        applicationId "com.rainyseason.cj"
        minSdk 21
        targetSdk 31
        if (isPlayStore) {
            versionCode generateVersionCode()
        } else {
            versionCode 1
        }
        println "Version code is $versionCode"

        if (isPlayStore) {
            versionName "2.5.1"
        } else {
            versionName "0.1"
        }
        println "Version name is $versionName"
        buildConfigField "boolean", "IS_PLAY_STORE", "$isPlayStore"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        "room.schemaLocation": "$projectDir/schemas".toString(),
                ]
            }
        }
    }

    signingConfigs {
        release {
            keyAlias "default"
            keyPassword System.getenv('ANDROID_KEY_PASS')
            storeFile file(System.getenv('ANDROID_KEY_FILE'))
            storePassword System.getenv('ANDROID_KEY_PASS')
        }
    }

    buildFeatures {
        viewBinding true
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            debuggable true
            minifyEnabled false
        }
        release {
            minifyEnabled true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    flavorDimensions.add("environment")

    def configFlavorsConfig = { ProductFlavor flavor ->
        def name = flavor.name
        println "config flavor for $name"

        def stringProp = { propName ->
            def prop = getStringProp(propName)
            return '"' + prop + '"'
        }

        flavor.dimension "environment"
        flavor.buildConfigField "String", "ONESIGNAL_APP_ID", stringProp("onesignal.appid.$name")
        flavor.buildConfigField "String", "COC_HOST", stringProp("coc.host.$name")
        flavor.buildConfigField "String", "AMPLITUDE_KEY", stringProp("amplitude.key.$name")
    }

    productFlavors {
        dev { flavor ->
            flavor.applicationIdSuffix ".dev"
            configFlavorsConfig(flavor)
        }
        prod { flavor ->
            configFlavorsConfig(flavor)
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
        freeCompilerArgs += ["-Xopt-in=kotlin.RequiresOptIn"]
    }

    lintOptions {
        disable 'IconLocation', 'ContentDescription'
    }

    buildTypes.all { buildType ->
        buildType.javaCompileOptions.annotationProcessorOptions.arguments =
                [
                        epoxyDisableDslMarker: "true",
                ]
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'
    implementation 'com.jakewharton.timber:timber:5.0.1'
    implementation 'com.onesignal:OneSignal:[4.0.0, 4.99.99]'

    implementation 'jp.wasabeef:glide-transformations:4.3.0'

    def okhttpVersion = "4.9.1"
    implementation("com.squareup.okhttp3:okhttp:$okhttpVersion")
    implementation("com.squareup.okhttp3:logging-interceptor:$okhttpVersion")

    implementation 'androidx.datastore:datastore:1.0.0'
    implementation("androidx.datastore:datastore-preferences:1.0.0")


    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.5.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.5.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-play-services:1.5.1'

    def retrofit_version = "2.9.0"
    implementation "com.squareup.retrofit2:retrofit:${retrofit_version}"
    implementation "com.squareup.retrofit2:converter-moshi:${retrofit_version}"

    def moshi_version = "1.12.0"
    implementation("com.squareup.moshi:moshi:$moshi_version")
    kapt("com.squareup.moshi:moshi-kotlin-codegen:$moshi_version")
    kaptTest("com.squareup.moshi:moshi-kotlin-codegen:$moshi_version")

    def dagger_version = '2.38.1'
    implementation "com.google.dagger:dagger:${dagger_version}"
    kapt "com.google.dagger:dagger-compiler:${dagger_version}"
    implementation "com.google.dagger:dagger-android:${dagger_version}"
    implementation "com.google.dagger:dagger-android-support:${dagger_version}"
    kapt "com.google.dagger:dagger-android-processor:${dagger_version}"

    implementation 'com.airbnb.android:mavericks:2.3.0'

    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'
    //noinspection GradleDependency
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.4.0-alpha03'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'

    //noinspection GradleDependency
    implementation "androidx.work:work-runtime-ktx:2.7.1"

    def epoxyVersion = "4.6.2"
    implementation "com.airbnb.android:epoxy:$epoxyVersion"
    kapt "com.airbnb.android:epoxy-processor:$epoxyVersion"
    implementation 'com.github.rubensousa:gravitysnaphelper:2.2.2'

    //noinspection GradleDependency
    implementation 'com.google.android.material:material:1.5.0-alpha02'

    implementation 'com.github.bumptech.glide:glide:4.12.0'
    implementation "com.github.bumptech.glide:okhttp3-integration:4.12.0"
    kapt 'com.github.bumptech.glide:compiler:4.12.0'

    implementation 'androidx.preference:preference-ktx:1.1.1'

    implementation platform('com.google.firebase:firebase-bom:29.0.0')
    implementation 'com.google.firebase:firebase-analytics'
    implementation 'com.google.firebase:firebase-crashlytics'
    implementation 'com.google.firebase:firebase-perf-ktx'
    implementation 'com.google.firebase:firebase-config-ktx'
    implementation 'com.google.firebase:firebase-auth-ktx'
    implementation 'com.google.firebase:firebase-firestore-ktx'
    implementation 'com.firebaseui:firebase-ui-auth:7.2.0'

    def nav_version = "2.3.5"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"

    implementation 'com.google.android.play:core:1.10.2'
    implementation 'com.google.android.play:core-ktx:1.8.1'

    implementation 'me.zhanghai.android.materialratingbar:library:1.4.0'
    implementation 'me.relex:circleindicator:2.1.6'

    implementation 'com.jakewharton.threetenabp:threetenabp:1.3.1'

    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'

    implementation "io.noties.markwon:core:4.6.2"

    implementation 'androidx.lifecycle:lifecycle-process:2.3.1'

    implementation 'com.github.ihsanbal:LoggingInterceptor:3.1.0'

    implementation 'com.amplitude:android-sdk:2.30.0'

    def room_version = "2.3.0"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    kapt "org.xerial:sqlite-jdbc:3.34.0"

    testImplementation 'junit:junit:4.13.2'
    testImplementation 'org.robolectric:robolectric:4.7.3'
    testImplementation "org.mockito.kotlin:mockito-kotlin:4.0.0"
    testImplementation 'androidx.test.ext:junit-ktx:1.1.3'
    testImplementation 'androidx.work:work-testing:2.7.1'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestImplementation 'androidx.test:rules:1.4.0'
}

